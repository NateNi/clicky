{"version":3,"sources":["Components/Header.js","Components/Card.js","Components/Infobar.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","top","current","react_default","a","createElement","className","this","props","count","alt","src","topScore","Component","Card","handleClick","_this","pic","clicked","startReset","changeClicked","key","console","log","rando","onClick","file","width","height","Infobar","doReset","imagesDummy","App","images","counter","reset","randomizeArray","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","updateState","newState","setState","render","i","passedKey","_this2","src_Components_Header","src_Components_Infobar","map","image","Components_Card","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89404f1a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nclass Header extends Component {\r\n  state = {\r\n    top: 0,\r\n    current: 0\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <nav>\r\n        <div className=\"nav-wrapper green darken-4\">\r\n          <h4 className=\"alignleft\">Current Score: {this.props.count}</h4>\r\n\r\n          <div className=\"aligncenter\">\r\n            <img\r\n              className=\"center logo\"\r\n              alt=\"Lord of the Rings Logo\"\r\n              src=\"./Images/lotr.png\"\r\n            />\r\n          </div>\r\n\r\n          <h4 className=\"right alignright\">Top Score: {this.props.topScore}</h4>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Card extends Component {\r\n\r\n  handleClick = () => {\r\n    if (this.props.pic.clicked) {\r\n      this.props.startReset();\r\n    } else {\r\n      this.props.changeClicked(this.props.pic.key);\r\n      console.log(\"shuffle\");\r\n      this.props.rando();\r\n    }\r\n  };\r\n\r\n /*  checkForReset = () => {\r\n    {(this.props.reset) ? this.setState({ clicked: false }) : console.log(\"No Reset\")};\r\n  } */\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col s6 m4 l3\">\r\n        <img\r\n          onClick={this.handleClick}\r\n          alt={this.props.pic.file}\r\n          src={\"./Images/\" + this.props.pic.file}\r\n          width=\"150px\"\r\n          height=\"150px\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport \"./Infobar.css\";\r\n\r\nclass Infobar extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"info\">\r\n          <div className=\"vertical-middle\">\r\n            <h2 className=\"middle\">Clicky Game</h2>\r\n            <h5 className=\"middle\">\r\n              Increase your score by clicking on a character. Don't click on any\r\n              more than once!\r\n            </h5>\r\n          </div>\r\n        </div>\r\n        <h5 className=\"status\">{(this.props.doReset ? \"GAME OVER. Try Again!\" : \"Select a character!\")}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Infobar;\r\n","import React, { Component } from \"react\";\nimport Header from \"./Components/Header\";\nimport Card from \"./Components/Card\";\nimport Infobar from \"./Components/Infobar\";\nimport \"./App.css\";\n\n\nlet imagesDummy = [\n  { file: \"Aragorn.JPG\", key: 1, clicked: false  },\n  { file: \"Arwen.JPG\", key: 2, clicked: false  },\n  { file: \"Elrond.JPG\", key: 3, clicked: false  },\n  { file: \"Faramir.PNG\", key: 4, clicked: false  },\n  { file: \"Frodo.PNG\", key: 5, clicked: false  },\n  { file: \"Gandalf.JPG\", key: 6, clicked: false  },\n  { file: \"Gimli.PNG\", key: 7, clicked: false  },\n  { file: \"Gollum.PNG\", key: 8, clicked: false  },\n  { file: \"Legolas.PNG\", key: 9, clicked: false  },\n  { file: \"Pippin.JPG\", key: 10, clicked: false  },\n  { file: \"Saruman.JPG\", key: 11, clicked: false  },\n  { file: \"Sauron.JPG\", key: 12, clicked: false  }\n];\n\n\n\nclass App extends Component {\n\n  state = {\n    images: [\n      { file: \"Aragorn.JPG\", key: 1, clicked: false },\n      { file: \"Arwen.JPG\", key: 2, clicked: false  },\n      { file: \"Elrond.JPG\", key: 3, clicked: false  },\n      { file: \"Faramir.PNG\", key: 4, clicked: false  },\n      { file: \"Frodo.PNG\", key: 5, clicked: false  },\n      { file: \"Gandalf.JPG\", key: 6, clicked: false  },\n      { file: \"Gimli.PNG\", key: 7, clicked: false  },\n      { file: \"Gollum.PNG\", key: 8, clicked: false  },\n      { file: \"Legolas.PNG\", key: 9, clicked: false  },\n      { file: \"Pippin.JPG\", key: 10, clicked: false  },\n      { file: \"Saruman.JPG\", key: 11, clicked: false  },\n      { file: \"Sauron.JPG\", key: 12, clicked: false  }\n    ],\n    counter: 0,\n    top: 0,\n    reset: false\n\n  }\n\n  randomizeArray = () => {\n    var currentIndex = imagesDummy.length, temporaryValue, randomIndex;\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      temporaryValue = imagesDummy[currentIndex];\n      imagesDummy[currentIndex] = imagesDummy[randomIndex];\n      imagesDummy[randomIndex] = temporaryValue;\n    }\n\n    this.updateState();\n  }\n\n  updateState = () => {\n    let newState = this.state.counter + 1;\n    this.setState({reset: false});\n    this.setState({counter: this.state.counter + 1});\n    this.setState({images: imagesDummy});\n    if (newState>=this.state.top){\n      (this.setState({top: newState}))\n    } \n    this.render();\n  }\n\n\n  startReset = () => {\n    for (let i = 0; i < imagesDummy.length; i++){\n      imagesDummy[i].clicked = false;\n    }\n    console.log(\"RESETTING\");\n    this.setState({images: imagesDummy});\n    this.setState({counter: 0});\n    this.setState({reset: true});\n  }\n\n  changeClicked = (passedKey) => {\n    for (let i = 0; i < imagesDummy.length; i++){\n      if (imagesDummy[i].key === passedKey){\n        imagesDummy[i].clicked = true;\n      } \n    }\n    console.log(\"Changing Clicked\");\n    this.setState({images: imagesDummy});\n  }\n\n\n\n  render() {\n    console.log(\"now rendering\");\n    return (\n      <div>\n        <Header count={this.state.counter} topScore={this.state.top} />\n        <Infobar doReset={this.state.reset}/>\n        <div className=\"container main-body\">\n          <div className=\"row\">\n            {this.state.images.map(image => (\n              <Card pic={image} key={image.key} rando={this.randomizeArray} changeClicked={this.changeClicked} startReset={this.startReset}/>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}